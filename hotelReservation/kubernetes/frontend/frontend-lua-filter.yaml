apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: frontend-lua-filter
  namespace: hr2
spec:
  workloadSelector:
    labels:
      io.kompose.service: frontend  # 匹配您现有的frontend标签
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        portNumber: 8081
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- 添加gRPC兼容的元数据
              request_handle:headers():add("x-custom-auth", "verified")
              
              -- 确保Content-Type正确
              local content_type = request_handle:headers():get("content-type") or ""
              if not content_type:find("application/grpc") then
                request_handle:logWarn("[LUA] Non-gRPC content-type: "..content_type)
              end
              
              request_handle:logInfo("[LUA] Added x-custom-auth header")
            end

  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        portNumber: 8082
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- 添加gRPC兼容的元数据
              request_handle:headers():add("x-custom-auth", "verified")
              
              -- 确保Content-Type正确
              local content_type = request_handle:headers():get("content-type") or ""
              if not content_type:find("application/grpc") then
                request_handle:logWarn("[LUA] Non-gRPC content-type: "..content_type)
              end
              
              request_handle:logInfo("[LUA] Added x-custom-auth header")
            end

  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        portNumber: 8083
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- 添加gRPC兼容的元数据
              request_handle:headers():add("x-custom-auth", "verified")
              
              -- 确保Content-Type正确
              local content_type = request_handle:headers():get("content-type") or ""
              if not content_type:find("application/grpc") then
                request_handle:logWarn("[LUA] Non-gRPC content-type: "..content_type)
              end
              
              request_handle:logInfo("[LUA] Added x-custom-auth header")
            end

  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        portNumber: 8084
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- 添加gRPC兼容的元数据
              request_handle:headers():add("x-custom-auth", "verified")
              
              -- 确保Content-Type正确
              local content_type = request_handle:headers():get("content-type") or ""
              if not content_type:find("application/grpc") then
                request_handle:logWarn("[LUA] Non-gRPC content-type: "..content_type)
              end
              
              request_handle:logInfo("[LUA] Added x-custom-auth header")
            end

  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        portNumber: 8085
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- 添加gRPC兼容的元数据
              request_handle:headers():add("x-custom-auth", "verified")
              
              -- 确保Content-Type正确
              local content_type = request_handle:headers():get("content-type") or ""
              if not content_type:find("application/grpc") then
                request_handle:logWarn("[LUA] Non-gRPC content-type: "..content_type)
              end
              
              request_handle:logInfo("[LUA] Added x-custom-auth header")
            end

  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        portNumber: 8086
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- 添加gRPC兼容的元数据
              request_handle:headers():add("x-custom-auth", "verified")
              
              -- 确保Content-Type正确
              local content_type = request_handle:headers():get("content-type") or ""
              if not content_type:find("application/grpc") then
                request_handle:logWarn("[LUA] Non-gRPC content-type: "..content_type)
              end
              
              request_handle:logInfo("[LUA] Added x-custom-auth header")
            end

  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        portNumber: 8087
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- 添加gRPC兼容的元数据
              request_handle:headers():add("x-custom-auth", "verified")
              
              -- 确保Content-Type正确
              local content_type = request_handle:headers():get("content-type") or ""
              if not content_type:find("application/grpc") then
                request_handle:logWarn("[LUA] Non-gRPC content-type: "..content_type)
              end
              
              request_handle:logInfo("[LUA] Added x-custom-auth header")
            end